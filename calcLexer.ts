// Generated from calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class calcLexer extends Lexer {
	public static readonly COS = 1;
	public static readonly SIN = 2;
	public static readonly TAN = 3;
	public static readonly ACOS = 4;
	public static readonly ASIN = 5;
	public static readonly ATAN = 6;
	public static readonly LN = 7;
	public static readonly LOG = 8;
	public static readonly SQRT = 9;
	public static readonly LPAREN = 10;
	public static readonly RPAREN = 11;
	public static readonly PLUS = 12;
	public static readonly MINUS = 13;
	public static readonly TIMES = 14;
	public static readonly DIV = 15;
	public static readonly GT = 16;
	public static readonly LT = 17;
	public static readonly EQ = 18;
	public static readonly COMMA = 19;
	public static readonly POINT = 20;
	public static readonly POW = 21;
	public static readonly PI = 22;
	public static readonly EULER = 23;
	public static readonly I = 24;
	public static readonly VARIABLE = 25;
	public static readonly SCIENTIFIC_NUMBER = 26;
	public static readonly WS = 27;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"COS", "SIN", "TAN", "ACOS", "ASIN", "ATAN", "LN", "LOG", "SQRT", "LPAREN", 
		"RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", "EQ", "COMMA", 
		"POINT", "POW", "PI", "EULER", "I", "VARIABLE", "VALID_ID_START", "VALID_ID_CHAR", 
		"SCIENTIFIC_NUMBER", "NUMBER", "E1", "E2", "SIGN", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'cos'", "'sin'", "'tan'", "'acos'", "'asin'", "'atan'", "'ln'", 
		"'log'", "'sqrt'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", 
		"'='", "','", "'.'", "'^'", "'pi'", undefined, "'i'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "COS", "SIN", "TAN", "ACOS", "ASIN", "ATAN", "LN", "LOG", "SQRT", 
		"LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", "EQ", 
		"COMMA", "POINT", "POW", "PI", "EULER", "I", "VARIABLE", "SCIENTIFIC_NUMBER", 
		"WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(calcLexer._LITERAL_NAMES, calcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return calcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(calcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return calcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return calcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return calcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return calcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1D\xBE\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n" +
		"\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03" +
		"\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
		"\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03" +
		"\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x07\x1A\x8E\n\x1A\f\x1A\x0E" +
		"\x1A\x91\v\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x05\x1C\x97\n\x1C\x03\x1D" +
		"\x03\x1D\x03\x1D\x05\x1D\x9C\n\x1D\x03\x1D\x05\x1D\x9F\n\x1D\x03\x1D\x03" +
		"\x1D\x05\x1D\xA3\n\x1D\x03\x1E\x06\x1E\xA6\n\x1E\r\x1E\x0E\x1E\xA7\x03" +
		"\x1E\x03\x1E\x06\x1E\xAC\n\x1E\r\x1E\x0E\x1E\xAD\x05\x1E\xB0\n\x1E\x03" +
		"\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x06\"\xB9\n\"\r\"\x0E\"\xBA\x03" +
		"\"\x03\"\x02\x02\x02#\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v" +
		"\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
		"\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
		"\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
		"\x027\x02\x029\x02\x1C;\x02\x02=\x02\x02?\x02\x02A\x02\x02C\x02\x1D\x03" +
		"\x02\x05\x05\x02C\\aac|\x04\x02--//\x05\x02\v\f\x0F\x0F\"\"\x02\xC0\x02" +
		"\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02" +
		"\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F" +
		"\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15" +
		"\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B" +
		"\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!" +
		"\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02" +
		"\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02" +
		"\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x029\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x03E\x03\x02\x02\x02\x05I\x03\x02\x02" +
		"\x02\x07M\x03\x02\x02\x02\tQ\x03\x02\x02\x02\vV\x03\x02\x02\x02\r[\x03" +
		"\x02\x02\x02\x0F`\x03\x02\x02\x02\x11c\x03\x02\x02\x02\x13g\x03\x02\x02" +
		"\x02\x15l\x03\x02\x02\x02\x17n\x03\x02\x02\x02\x19p\x03\x02\x02\x02\x1B" +
		"r\x03\x02\x02\x02\x1Dt\x03\x02\x02\x02\x1Fv\x03\x02\x02\x02!x\x03\x02" +
		"\x02\x02#z\x03\x02\x02\x02%|\x03\x02\x02\x02\'~\x03\x02\x02\x02)\x80\x03" +
		"\x02\x02\x02+\x82\x03\x02\x02\x02-\x84\x03\x02\x02\x02/\x87\x03\x02\x02" +
		"\x021\x89\x03\x02\x02\x023\x8B\x03\x02\x02\x025\x92\x03\x02\x02\x027\x96" +
		"\x03\x02\x02\x029\x98\x03\x02\x02\x02;\xA5\x03\x02\x02\x02=\xB1\x03\x02" +
		"\x02\x02?\xB3\x03\x02\x02\x02A\xB5\x03\x02\x02\x02C\xB8\x03\x02\x02\x02" +
		"EF\x07e\x02\x02FG\x07q\x02\x02GH\x07u\x02\x02H\x04\x03\x02\x02\x02IJ\x07" +
		"u\x02\x02JK\x07k\x02\x02KL\x07p\x02\x02L\x06\x03\x02\x02\x02MN\x07v\x02" +
		"\x02NO\x07c\x02\x02OP\x07p\x02\x02P\b\x03\x02\x02\x02QR\x07c\x02\x02R" +
		"S\x07e\x02\x02ST\x07q\x02\x02TU\x07u\x02\x02U\n\x03\x02\x02\x02VW\x07" +
		"c\x02\x02WX\x07u\x02\x02XY\x07k\x02\x02YZ\x07p\x02\x02Z\f\x03\x02\x02" +
		"\x02[\\\x07c\x02\x02\\]\x07v\x02\x02]^\x07c\x02\x02^_\x07p\x02\x02_\x0E" +
		"\x03\x02\x02\x02`a\x07n\x02\x02ab\x07p\x02\x02b\x10\x03\x02\x02\x02cd" +
		"\x07n\x02\x02de\x07q\x02\x02ef\x07i\x02\x02f\x12\x03\x02\x02\x02gh\x07" +
		"u\x02\x02hi\x07s\x02\x02ij\x07t\x02\x02jk\x07v\x02\x02k\x14\x03\x02\x02" +
		"\x02lm\x07*\x02\x02m\x16\x03\x02\x02\x02no\x07+\x02\x02o\x18\x03\x02\x02" +
		"\x02pq\x07-\x02\x02q\x1A\x03\x02\x02\x02rs\x07/\x02\x02s\x1C\x03\x02\x02" +
		"\x02tu\x07,\x02\x02u\x1E\x03\x02\x02\x02vw\x071\x02\x02w \x03\x02\x02" +
		"\x02xy\x07@\x02\x02y\"\x03\x02\x02\x02z{\x07>\x02\x02{$\x03\x02\x02\x02" +
		"|}\x07?\x02\x02}&\x03\x02\x02\x02~\x7F\x07.\x02\x02\x7F(\x03\x02\x02\x02" +
		"\x80\x81\x070\x02\x02\x81*\x03\x02\x02\x02\x82\x83\x07`\x02\x02\x83,\x03" +
		"\x02\x02\x02\x84\x85\x07r\x02\x02\x85\x86\x07k\x02\x02\x86.\x03\x02\x02" +
		"\x02\x87\x88\x05? \x02\x880\x03\x02\x02\x02\x89\x8A\x07k\x02\x02\x8A2" +
		"\x03\x02\x02\x02\x8B\x8F\x055\x1B\x02\x8C\x8E\x057\x1C\x02\x8D\x8C\x03" +
		"\x02\x02\x02\x8E\x91\x03\x02\x02\x02\x8F\x8D\x03\x02\x02\x02\x8F\x90\x03" +
		"\x02\x02\x02\x904\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x92\x93\t\x02" +
		"\x02\x02\x936\x03\x02\x02\x02\x94\x97\x055\x1B\x02\x95\x97\x042;\x02\x96" +
		"\x94\x03\x02\x02\x02\x96\x95\x03\x02\x02\x02\x978\x03\x02\x02\x02\x98" +
		"\xA2\x05;\x1E\x02\x99\x9C\x05=\x1F\x02\x9A\x9C\x05? \x02\x9B\x99\x03\x02" +
		"\x02\x02\x9B\x9A\x03\x02\x02\x02\x9C\x9E\x03\x02\x02\x02\x9D\x9F\x05A" +
		"!\x02\x9E\x9D\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F\xA0\x03\x02" +
		"\x02\x02\xA0\xA1\x05;\x1E\x02\xA1\xA3\x03\x02\x02\x02\xA2\x9B\x03\x02" +
		"\x02\x02\xA2\xA3\x03\x02\x02\x02\xA3:\x03\x02\x02\x02\xA4\xA6\x042;\x02" +
		"\xA5\xA4\x03\x02\x02\x02\xA6\xA7\x03\x02\x02\x02\xA7\xA5\x03\x02\x02\x02" +
		"\xA7\xA8\x03\x02\x02\x02\xA8\xAF\x03\x02\x02\x02\xA9\xAB\x070\x02\x02" +
		"\xAA\xAC\x042;\x02\xAB\xAA\x03\x02\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD" +
		"\xAB\x03\x02\x02\x02\xAD\xAE\x03\x02\x02\x02\xAE\xB0\x03\x02\x02\x02\xAF" +
		"\xA9\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02\xB0<\x03\x02\x02\x02\xB1" +
		"\xB2\x07G\x02\x02\xB2>\x03\x02\x02\x02\xB3\xB4\x07g\x02\x02\xB4@\x03\x02" +
		"\x02\x02\xB5\xB6\t\x03\x02\x02\xB6B\x03\x02\x02\x02\xB7\xB9\t\x04\x02" +
		"\x02\xB8\xB7\x03\x02\x02\x02\xB9\xBA\x03\x02\x02\x02\xBA\xB8\x03\x02\x02" +
		"\x02\xBA\xBB\x03\x02\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC\xBD\b\"\x02\x02" +
		"\xBDD\x03\x02\x02\x02\f\x02\x8F\x96\x9B\x9E\xA2\xA7\xAD\xAF\xBA\x03\b" +
		"\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!calcLexer.__ATN) {
			calcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(calcLexer._serializedATN));
		}

		return calcLexer.__ATN;
	}

}

